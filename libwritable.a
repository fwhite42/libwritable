!<arch>
//                                              114       `
writable_realloc.c/
writable_realloc_and_free.c/
writable_writeone.c/
writable_writemany.c/
writable_writestr.c/

/0              1717479969  1000  1000  100644  520       `
#include"libwritable.h"

char	*writable_realloc(t_writable *self)
{
	size_t	old_capacity;
	char	*old_buffer;
	size_t	new_capacity;
	char	*new_buffer;

	old_capacaity = self->buffer_capacity;
	old_buffer = self->dst.buffer;
	new_capacaity = old_capacity * 2;
	new_buffer = malloc(new_capacity);
	if (!new_buffer)
		return (NULL);
	while (new_capacity--)
		new_buffer[new_capacity] = 0;
	while (old_capacity--)
		new_buffer[old_capacity] = old_buffer[old_capacity];
	self->dst.buffer = new_buffer;
	return (old_buffer);
}
/20             1717480124  1000  1000  100644  171       `
#include"libwritable.h"

bool	writable_realloc_and_free(t_writable *self)
{
	char	*old_buffer;

	old_buffer = writable_realloc(self);
	free(old_buffer);
	return (true);
}

/49             1717480798  1000  1000  100644  404       `
#include"libwritable.h"

bool	writable_writeone(t_writable *self, char c)
{
	size_t	current_size;

	current_size = dst.buffer - self->buffer_start;
	if (self->is_buffer)
	{
		if (!(current_size > self->buffer_capacity))
		{
			writable_realloc_and_free(self);
		}
		*(self->dst.buffer) = c;
		self->dst.buffer++;
	}
	else
	{
		if (write(self->dst.fd, &c, 1) != 1)
			return (false);
	}
	return (true);
}
/70             1717479402  1000  1000  100644  0         `
/92             1717479405  1000  1000  100644  0         `
